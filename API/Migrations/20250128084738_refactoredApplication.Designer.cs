// <auto-generated />
using System;
using API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(CharityDbContext))]
    [Migration("20250128084738_refactoredApplication")]
    partial class refactoredApplication
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("API.Models.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("API.Models.ApplicationBeneficiary", b =>
                {
                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId", "BeneficiaryId");

                    b.HasIndex("BeneficiaryId");

                    b.ToTable("ApplicationBeneficiaries");
                });

            modelBuilder.Entity("API.Models.CharityProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("CharityProjects");
                });

            modelBuilder.Entity("API.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId")
                        .IsUnique();

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("API.Models.ProjectBeneficiary", b =>
                {
                    b.Property<int>("CharityProjectId")
                        .HasColumnType("int");

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int");

                    b.HasKey("CharityProjectId", "BeneficiaryId");

                    b.HasIndex("BeneficiaryId");

                    b.ToTable("ProjectBeneficiaries");
                });

            modelBuilder.Entity("API.Models.ProjectDonor", b =>
                {
                    b.Property<int>("CharityProjectId")
                        .HasColumnType("int");

                    b.Property<int>("DonorId")
                        .HasColumnType("int");

                    b.HasKey("CharityProjectId", "DonorId");

                    b.HasIndex("DonorId");

                    b.ToTable("ProjectDonors");
                });

            modelBuilder.Entity("API.Models.ProjectRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CharityProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharityProjectId");

                    b.ToTable("ProjectRequirements");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("Role");
                });

            modelBuilder.Entity("API.Models.Admin", b =>
                {
                    b.HasBaseType("API.Models.User");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("API.Models.Beneficiary", b =>
                {
                    b.HasBaseType("API.Models.User");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("API.Models.Donor", b =>
                {
                    b.HasBaseType("API.Models.User");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("API.Models.Employee", b =>
                {
                    b.HasBaseType("API.Models.User");

                    b.Property<int?>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasIndex("OrganizationId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("API.Models.Application", b =>
                {
                    b.HasOne("API.Models.Employee", "Employee")
                        .WithMany("Applications")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.ApplicationBeneficiary", b =>
                {
                    b.HasOne("API.Models.Application", "Application")
                        .WithMany("ApplicationBeneficiary")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Beneficiary", "Beneficiary")
                        .WithMany("ApplicationBeneficiary")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Beneficiary");
                });

            modelBuilder.Entity("API.Models.CharityProject", b =>
                {
                    b.HasOne("API.Models.Employee", "Employee")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("API.Models.Organization", b =>
                {
                    b.HasOne("API.Models.Admin", "Admin")
                        .WithOne("Organization")
                        .HasForeignKey("API.Models.Organization", "AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("API.Models.ProjectBeneficiary", b =>
                {
                    b.HasOne("API.Models.Beneficiary", "Beneficiary")
                        .WithMany("Projects")
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.CharityProject", "CharityProject")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("CharityProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("CharityProject");
                });

            modelBuilder.Entity("API.Models.ProjectDonor", b =>
                {
                    b.HasOne("API.Models.CharityProject", "CharityProject")
                        .WithMany("Donors")
                        .HasForeignKey("CharityProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("API.Models.Donor", "Donor")
                        .WithMany("Projects")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharityProject");

                    b.Navigation("Donor");
                });

            modelBuilder.Entity("API.Models.ProjectRequirement", b =>
                {
                    b.HasOne("API.Models.CharityProject", "CharityProject")
                        .WithMany("Requirements")
                        .HasForeignKey("CharityProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharityProject");
                });

            modelBuilder.Entity("API.Models.Employee", b =>
                {
                    b.HasOne("API.Models.Organization", "Organization")
                        .WithMany("Employees")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("API.Models.Application", b =>
                {
                    b.Navigation("ApplicationBeneficiary");
                });

            modelBuilder.Entity("API.Models.CharityProject", b =>
                {
                    b.Navigation("Beneficiaries");

                    b.Navigation("Donors");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("API.Models.Organization", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("API.Models.Admin", b =>
                {
                    b.Navigation("Organization")
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Beneficiary", b =>
                {
                    b.Navigation("ApplicationBeneficiary");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("API.Models.Donor", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("API.Models.Employee", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CreatedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
